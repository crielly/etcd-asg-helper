import boto3
import logging
import os
import sys

from botocore.vendored import requests

_LOGGER = logging.Logger('etcdasghelper')

from constants import (
    PROJECT_NAME, ENV_NAME, ETCD_TAG_NAME, ETCD_PORT, ZONE_ID, SRV_RECORD_NAME, 
    DOMAIN_NAME, SRV_TTL, LOG_LEVEL, ETCD_CLIENT_CERT_SSM_PATH, ETCD_CLIENT_KEY_SSM_PATH,
    ETCD_INTERNAL_API_DNS
)

def get_instances(client, config, return_attribute):
    """Return a list of private DNS addresses for servers matching project, 
    environment, id tag name (which identified it as an etcd or master server),
    and instance state (pending/running)
    """

    servers = []

    _LOGGER.info(
        "Finding instances from Project {} - Environment {} - tagged {}".format(
            config.get(PROJECT_NAME, {}),
            config.get(ENV_NAME, {}),
            config.get(ETCD_TAG_NAME, {})
        ))

    resp = client.describe_instances(
        Filters=[
            {
                'Name': 'tag:Environment',
                'Values': [
                    config.get(ENV_NAME, {})
                    ]
            },
            {
                'Name': 'tag:Project',
                'Values':[
                    config.get(PROJECT_NAME, {})
                    ]
            },
            {
                'Name': 'tag:{}'.format(id_tag_name),
                'Values': [
                    'True', 'true'
                    ]
            },
            {
                'Name': 'instance-state-name',
                'Values': [
                    'running', 'pending'
                ]
            }
        ]
    )

    for i in resp['Reservations']:
        servers.append(
            i['Instances'][0][return_attribute]
        )

    _LOGGER.info("Found instances: {}".format(servers))
    
    return servers

def construct_srv_record_content(config, etcd_members):
    """
    Construct a list of dictionaries that will be our etcd SRV record's contents.
    Method assumes you do not want priority, weight, or port numbers to differ
    between etcd members
    """

    members = []

    for m in etcd_members:
        members.append(
            {
                'Value': "0 0 {} {}".format(
                    config.get(ETCD_PORT, {}), m
                )
            }
        )

    _LOGGER.info("Constructed SRV record content: {}".format(members))
    return members

def upsert_etcd_srv_record(client, config, record_content):
    """
    Upsert a Route53 SRV record with the content generated by the 
    construct_srv_record_content method.
    """

    resp = client.change_resource_record_sets(
        HostedZoneId=config.get(ZONE_ID, {}),
        ChangeBatch={
            'Comment': 'Updating etcd SRV Record',
            'Changes': [
                {
                    'Action': 'UPSERT',
                    'ResourceRecordSet': {
                        'Name': "{}.{}".format(
                            config.get(SRV_RECORD_NAME, {}),
                            config.get(DOMAIN_NAME, {})
                        ),
                        'Type': 'SRV',
                        'TTL': int(config.get(SRV_TTL, {})),
                        'ResourceRecords': record_content
                    }
                }
            ]
        }
    )

    _LOGGER.info("Updating SRV Record {}.{} in zone {} with TTL of {}".format(
        config.get(SRV_RECORD_NAME, {}),
        config.get(DOMAIN_NAME, {}),
        config.get(ZONE_ID, {}),
        config.get(SRV_TTL, {})
    ))
    _LOGGER.info("Return Code: {}".format(
        resp['ResponseMetadata']['HTTPStatusCode']
    ))

def get_etcd_client_cert_key(client, config):
    """
    Fetch etcd client certificate and private key and stash them in /tmp
    """

    cert = client.get_parameter(
        Name=config.get(ETCD_CLIENT_CERT_SSM_PATH, {}),
        WithDecryption=True
    )['Parameter']['Value']

    key = client.get_parameter(
        Name=config.get(ETCD_CLIENT_KEY_SSM_PATH, {}),
        WithDecryption=True
    )['Parameter']['Value']

    cacert = client.get_parameter(
        Name=config.get(ETCD_ROOT_CA_CERT_SSM_PATH, {}),
        WithDecryption=True
    )['Parameter']['Value']

    with open("/tmp/etcd_client_cert.pem", "w") as certfile:
        certfile.write(cert)
        os.chmod("/tmp/etcd_client_cert.pem", 0o600)

    with open("/tmp/etcd_client_key.pem", "w") as keyfile:
        keyfile.write(cert)
        os.chmod("/tmp/etcd_client_key.pem", 0o600)

    with open("/tmp/etcd_cacert.pem", "w") as cacertfile:
        cacertfile.write(cert)
        os.chmod("/tmp/etcd_cacert.pem", 0o600)

def get_etcd_members(config):
    return requests.get(
        'https://{}:{}/v2/members/'.format(ETCD_INTERNAL_API_DNS, ETCD_PORT),
        cert=('/tmp/etcd-client-cert.pem', '/tmp/etcd-client-key.pem'),
        verify='/tmp/etcd-cacert.pem'
    ).json()['members']


def setup_logging():
    """Configure _LOGGER
    """
    _LOGGER.setLevel(logging.DEBUG)
    handler = logging.StreamHandler(sys.stdout)
    formatter = logging.Formatter('%(asctime)s : %(levelname)s - %(message)s')
    handler.setFormatter(formatter)
    _LOGGER.addHandler(handler)

def lambda_handler(event, context):
    """Entrypoint for AWS Lambda
    """
    setup_logging()

    config = {
        PROJECT_NAME: os.environ.get(PROJECT_NAME),
        ENV_NAME: os.environ.get(ENV_NAME),
        ETCD_TAG_NAME: os.environ.get(ETCD_TAG_NAME),
        ZONE_ID: os.environ.get(ZONE_ID),
        DOMAIN_NAME: os.environ.get(DOMAIN_NAME),
        SRV_RECORD_NAME: os.environ.get(SRV_RECORD_NAME),
        SRV_TTL: os.environ.get(SRV_TTL),
        ETCD_PORT: os.environ.get(ETCD_PORT),
        LOG_LEVEL: os.environ.get(LOG_LEVEL, {}),
        ETCD_CLIENT_CERT_SSM_PATH: os.environ.get(ETCD_CLIENT_CERT_SSM_PATH, {}),
        ETCD_CLIENT_KEY_SSM_PATH: os.environ.get(ETCD_CLIENT_KEY_SSM_PATH, {}),
        ETCD_INTERNAL_API_DNS: os.environ.get(ETCD_INTERNAL_API_DNS, {})
    }

    try:
        # Establish client connections
        route53 = boto3.client('route53')
        ec2 = boto3.client('ec2')
        ssm = boto3.client('ssm')

        # Fetch etcd client cert and key
        get_etcd_client_cert_key(ssm, config)

        # Find current etcd servers
        etcdservers = get_instances(ec2, config, "PrivateDnsName")

        etcdmembers = get_etcd_members(config)

        # Purge any dead peers
        for m in etcdmembers:
            if etcdservers:
                if m['name'] not in etcdservers:
                    _LOGGER.info(
                        "{} is a dead peer with id {}, removing".format(
                            m['name'], m['id']
                        )
                    )
                    requests.delete(
                        'https://{}:{}/v2/members/{}'.format(
                            ETCD_INTERNAL_API_DNS, ETCD_PORT, m['id']
                        ),
                        cert=('/tmp/etcd-client-cert.pem', '/tmp/etcd-client-key.pem'),
                        verify='/tmp/etcd-cacert.pem'
                    )

        # Construct content for etcd SRV Record
        recordcontent = construct_srv_record_content(config, etcdservers)

        # UPSERT the etcd SRV record with most recent list of records
        upsert_etcd_srv_record(route53, config, recordcontent)

        _LOGGER.info("Sync Complete")

    except Exception as e:
        _LOGGER.error(e)
        exit(1)

if __name__ == '__main__':
    lambda_handler({}, {})
